{"version":3,"sources":["common/styled.js","common/components/charts/chartUtils/CustomChartToolTip.js","common/components/charts/chartUtils/CustomChartXTick.js","common/components/charts/simpleLineChart.js","pages/pDashboard/components/chartContainer.js","common/components/table/normalTable.js","pages/pDashboard/components/tableContainer.js","common/utils/responseCheckers.js","common/utils/requestAPIs.js","pages/pDashboard/utils/transformers.js","pages/pDashboard/ducks.js","pages/pDashboard/index.js","redux/reducers.js","redux/sagas.js","redux/configStore.js","App.js","serviceWorker.js","index.js"],"names":["StyledCard","styled","Card","_templateObject","ErrorMessageDiv","div","_templateObject2","StyledCustomChartTooltip","props","className","payload","tooltip","getJSX","react_default","a","createElement","concat","CustomChartToolTip_templateObject","CustomChartXTick","x","y","text","value","length","substring","transform","StyledText","textAnchor","width","dx","CustomChartXTick_templateObject","_yTickFormatter","val","Number","toFixed","StyledSimpleLineChart","_props$data","data","yAxisDataKey","_props$xAxisDatakey","xAxisDatakey","_props$yAxisLabel","yAxisLabel","_props$yTickFormatter","yTickFormatter","getTooltipJSX","lineStroke","constants","TICK_FILL","fill","fontWeight","Y_AXIS_LABEL","angle","es6","height","margin","top","right","left","bottom","strokeWidth","dataKey","tick","CustomChartXTick_CustomChartXTick","tickFormatter","label","cursor","content","stroke","simpleLineChart_templateObject","ChartContainer","dashboard","error","Fragment","xAxisDataKey","tooltipData","row","type","justify","col","timestamp","revenue","impressions","game","eCPM","StyledNormalTable","columns","dataSource","rowKey","_props$defaultPageSiz","defaultPageSize","table","pagination","showSizeChanger","normalTable_templateObject","TableContainer","sortNumbers","key","b","columnData","useMemo","next","tableColumns","arr","render","record","sorter","normalCheck","response","ok","json","status","Error","statusText","getRequest","url","params","checkFunction","Promise","resolve","reject","isEmpty","qs","stringify","fetch","then","body","setTimeout","message","getTransformedData","map","item","index","isNaN","Object","objectSpread","date","moment","valueOf","getDashboardDataRequest","dashboardSaga","GET_DASHBOARD_DATA_REQUEST","GET_DASHBOARD_DATA_REQUEST_SUCCESS","GET_DASHBOARD_DATA_REQUEST_ERROR","getDashboardRequestAction","createAction","getDashboardSelector","createSelector","getLoadingSelector","loading","getErrorSelector","createReducer","_createReducer","defineProperty","state","_ref","_ref2","_ref3","_ref4","dashboardData","transformedData","regenerator_default","wrap","_context","prev","call","sent","put","t0","stop","_marked","_context2","all","takeEvery","t1","t2","_marked2","RangePicker","DatePicker","connect","_useState","useState","_useState2","slicedToArray","range","setRange","_useState3","_useState4","prevDashboard","setPrevDashboard","useEffect","dateRange","minBy","maxBy","filteredDashboard","filter","defaultValue","disabledDate","current","endOf","onChange","_range","chartContainer","tableContainer","rootReducer","_callee","sagas_marked","sagaMiddleware","createSagaMiddleware","middleware","toConsumableArray","getDefaultMiddleware","logger","console","log","store","configureStore","reducer","devTools","process","preloadedState","enhancers","run","rootSaga","App","es","pDashboard","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.996d6077.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { Card } from \"antd\";\n\nexport const StyledCard = styled(Card)`\n  margin: 5px;\n  border: none;\n  box-shadow: 0 3px 10px 0 rgba(0, 0, 0, 0.1);\n  border-radius: 5px;\n  .ant-card-body {\n    padding: 18px;\n  }\n`;\n\nexport const ErrorMessageDiv = styled.div`\n  width: 100%;\n  height: 400px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;","import React from \"react\";\nimport styled from \"styled-components\"\n\nconst CustomChartTooltip = props => {\n  const { className, payload, getJSX, } = props;\n\n  const tooltip = getJSX(payload);\n  return tooltip ? <div className={`chart-tooltip ${className}`}>{tooltip}</div> : <div />;\n};\n\nconst StyledCustomChartTooltip = styled(CustomChartTooltip)`\n  min-width: 200px;\n  max-width: 600px;\n  min-height: 75px;\n  background-color: white;\n  border: solid 1px #c0c0c0;\n  text-align: left;\n  padding: 10px;\n  white-space: pre-wrap;\n\n  .chart-tooltip-key {\n    font-weight: normal;\n  }\n\n  .chart-tooltip-value {\n    font-weight: 900;\n  }\n`;\n\nexport { StyledCustomChartTooltip as CustomChartTooltip }","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const CustomChartXTick = props => {\n  const { x, y, payload, className } = props;\n\n  let text = payload.value;\n  if (text.length > 12) {\n    text = text.substring(0, 12) + \"...\";\n  }\n\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <StyledText className={className} textAnchor=\"middle\" width={70} transform=\"rotate(-45)\" dx=\"-45\">\n        {text}\n      </StyledText>\n    </g>\n  );\n};\n\nconst StyledText = styled.text`\n  font-size: 12px;\n`;","import React from \"react\";\nimport {\n  ResponsiveContainer,\n  LineChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Line\n} from \"recharts\";\nimport styled from \"styled-components\";\nimport { CustomChartTooltip } from \"./chartUtils/CustomChartToolTip\";\nimport { CustomChartXTick } from \"./chartUtils/CustomChartXTick\";\nimport { ErrorMessageDiv } from \"../../../common/styled\";\n\nconst _yTickFormatter = val => {\n  return Number(val.toFixed(4));\n};\n\nconst SimpleLineChart = (props) => {\n  let {\n    className,\n    data = [],\n    yAxisDataKey,\n    xAxisDatakey = \"xAxisDatakey\",\n    yAxisLabel = \"\",\n    yTickFormatter = _yTickFormatter,\n    getTooltipJSX,\n    lineStroke\n  } = props;\n\n  const constants = {\n    TICK_FILL: { fill: \"#010101\", fontWeight: \"normal\" },\n    Y_AXIS_LABEL: { value: yAxisLabel, angle: -90, dx: -25 }\n  };\n\n  return (\n    <div>\n      {\n        (data.length) ?\n          <ResponsiveContainer width={\"100%\"} height={400} className={className}>\n            <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 50 }}>\n              <CartesianGrid strokeWidth={0.5} />\n              <XAxis dataKey={xAxisDatakey} tick={<CustomChartXTick />} />\n              <YAxis\n                tick={constants.TICK_FILL}\n                tickFormatter={yTickFormatter}\n                label={constants.Y_AXIS_LABEL}\n              />\n              <Tooltip cursor={false} content={<CustomChartTooltip getJSX={getTooltipJSX} />} />\n              <Line dataKey={yAxisDataKey} stroke={lineStroke} />\n            </LineChart>\n          </ResponsiveContainer>\n          :\n          <ErrorMessageDiv>No Data Available.</ErrorMessageDiv>\n      }\n    </div>\n  )\n}\n\nconst StyledSimpleLineChart = styled(SimpleLineChart)`\n  font-size: 12px;\n`;\n\nexport { StyledSimpleLineChart as SimpleLineChart }","import React from \"react\";\nimport { Row, Col } from \"antd\";\n\nimport { SimpleLineChart } from \"../../../common/components/charts/simpleLineChart\";\nimport { ErrorMessageDiv } from \"../../../common/styled\";\n\nconst ChartContainer = (props) => {\n  let { dashboard, error } = props;\n\n  const getTooltipJSX = (tooltipData) => {\n    let data = null;\n    if (tooltipData && tooltipData.length) {\n      data = tooltipData[0].payload;\n    }\n    return (\n      <div>\n        {\n          (data) ?\n            <>\n              <Row type=\"flex\" justify=\"start\">\n                <Col className=\"chart-tooltip-key\">Date - </Col>\n                <Col className=\"chart-tooltip-value\">{data.timestamp}</Col>\n              </Row>\n              <Row type=\"flex\" justify=\"start\">\n                <Col className=\"chart-tooltip-key\">Revenue - </Col>\n                <Col className=\"chart-tooltip-value\">{data.revenue}</Col>\n              </Row>\n              <Row type=\"flex\" justify=\"start\">\n                <Col className=\"chart-tooltip-key\">Impressions - </Col>\n                <Col className=\"chart-tooltip-value\">{data.impressions}</Col>\n              </Row>\n              <Row type=\"flex\" justify=\"start\">\n                <Col className=\"chart-tooltip-key\">Game - </Col>\n                <Col className=\"chart-tooltip-value\">{data.game}</Col>\n              </Row>\n              <Row type=\"flex\" justify=\"start\">\n                <Col className=\"chart-tooltip-key\">eCPM - </Col>\n                <Col className=\"chart-tooltip-value\">{Number(data.eCPM.toFixed(4))}</Col>\n              </Row>\n            </> : null\n        }\n      </div>\n    );\n  }\n\n\n\n  return (\n    <>\n      {\n        (!error) ?\n          < SimpleLineChart\n            data={dashboard}\n            yAxisDataKey=\"eCPM\"\n            xAxisDataKey=\"timestamp\"\n            lineStroke=\"#0366a8\"\n            getTooltipJSX={getTooltipJSX}\n            yAxisLabel=\"eCPM\"\n          />\n          :\n          <ErrorMessageDiv>\n            {error}\n          </ErrorMessageDiv>\n      }\n    </>\n  )\n}\n\nexport default ChartContainer;","import React from \"react\";\nimport { Table } from \"antd\";\nimport styled from \"styled-components\";\n\nconst NormalTable = (props) => {\n  let { columns, dataSource, rowKey, defaultPageSize = 5, className } = props;\n  return (\n    <Table className={className} columns={columns} dataSource={dataSource} rowKey={rowKey} pagination={{ defaultPageSize: defaultPageSize, showSizeChanger: true }} />\n  )\n}\n\nconst StyledNormalTable = styled(NormalTable)`\n  .ant-table-body {\n    overflow: auto;\n    table {\n      thead {\n        tr {\n          th {\n            padding: 8px;\n            text-align: left;\n            font-weight: 900;\n            font-size: 12px;\n            white-space: nowrap;\n          }\n        }\n      }\n\n      tbody {\n        tr {\n          border-bottom: solid 1px #c0c0c0;\n          td {\n            height: 50px;\n            padding: 10px;\n            text-align: left;\n            font-size: 12px;\n          }\n        }\n      }\n    }\n  }\n\n  .ant-table-body::-webkit-scrollbar {\n    height: 10px;\n    width: 10px;\n  }\n\n  .ant-table-body::-webkit-scrollbar-track {\n    background: #c0c0c0;\n  }\n\n  .ant-table-body::-webkit-scrollbar-thumb {\n    background: #423e3e;\n  }\n\n  .ant-pagination.ant-table-pagination {\n    .ant-pagination-disabled {\n      display: none;\n    }\n  }\n`;\n\nexport { StyledNormalTable as NormalTable };","import React, { useMemo } from \"react\";\nimport next from \"immer\";\n\nimport { NormalTable } from \"../../../common/components/table/normalTable\";\n\nimport tableColumns from \"../static/tableColumns.json\";\n\nconst TableContainer = (props) => {\n  let { dashboard } = props;\n\n  const sortNumbers = key => (a, b) => {\n    let _a = a[key] || 0;\n    let _b = b[key] || 0;\n\n    return _a - _b;\n  }\n\n  const sortAlphabets = key => (a, b) => {\n    if (a[key] < b[key]) {\n      return -1;\n    } else if (a[key] > b[key]) {\n      return 1;\n    }\n    return 0;\n  }\n\n  const columnData = useMemo(() => {\n    return next(tableColumns, arr => {\n      arr[0].render = (data, record) => {\n        return record.timestamp;\n      }\n      arr[4].render = (data, record) => {\n        return data.toFixed(4);\n      }\n      arr[0].sorter = sortNumbers(\"date\");\n      arr[1].sorter = sortAlphabets(\"game\");\n      arr[2].sorter = sortNumbers(\"revenue\");\n      arr[3].sorter = sortNumbers(\"impressions\");\n      arr[4].sorter = sortNumbers(\"eCPM\");\n    })\n  }, [])\n\n  return (\n    <NormalTable columns={columnData} dataSource={dashboard} rowKey=\"index\" />\n  )\n}\n\nexport default TableContainer;","export const normalCheck = (response) => {\n    if (response.ok) {\n        return response.json();\n    } else if (response.status === 401) {\n        throw new Error(response.statusText);\n    } else {\n        throw new Error(response.statusText);\n    }\n}\n","import qs from \"qs\";\nimport { isEmpty } from \"lodash\";\n\nexport const getRequest = (url, params, checkFunction) => {\n  return new Promise((resolve, reject) => {\n    if (params && !isEmpty(params)) {\n      url = url + \"?\" + qs.stringify(params);\n    }\n    fetch(url)\n      .then(checkFunction)\n      .then(body => {\n        resolve({ body: body });\n      });\n    setTimeout(() => {\n      reject({ message: \"Oops...! There seems to some problem with the connection. Please try again...\" });\n    }, 10000)\n  });\n}\n","import moment from \"moment\";\n\nexport const getTransformedData = (data) => {\n  return data.map((item, index) => {\n    let eCPM = item.revenue / item.impressions * 1000;\n    eCPM = isNaN(eCPM) ? 0 : eCPM;\n    return {\n      ...item,\n      xAxisDatakey: item.timestamp,\n      date: moment(item.timestamp).valueOf(),\n      eCPM: eCPM,\n      index\n    }\n  });\n}","import { takeEvery, call, put, all } from \"redux-saga/effects\";\nimport { createAction, createReducer, createSelector } from \"redux-starter-kit\";\nimport { normalCheck } from \"../../common/utils/responseCheckers\";\nimport { getRequest } from \"../../common/utils/requestAPIs\";\nimport { getTransformedData } from \"./utils/transformers\"\n\nconst GET_DASHBOARD_DATA_REQUEST = \"[dashboard] get dashboard data request\";\nconst GET_DASHBOARD_DATA_REQUEST_SUCCESS = \"[dashboard] get dashboard data request success\";\nconst GET_DASHBOARD_DATA_REQUEST_ERROR = \"[dashboard] get dashboard data request error\";\n\nconst initialState = {\n  loading: true,\n  dashboard: [],\n  error: false\n};\n\nexport const getDashboardRequestAction = createAction(GET_DASHBOARD_DATA_REQUEST);\n\nexport const getDashboardSelector = createSelector(\n  [\"dashboard.dashboard\"],\n  dashboard => dashboard\n);\n\nexport const getLoadingSelector = createSelector(\n  [\"dashboard.loading\"],\n  loading => loading\n);\n\nexport const getErrorSelector = createSelector(\n  [\"dashboard.error\"],\n  error => error\n);\n\nexport const dashboard = createReducer(initialState, {\n  [GET_DASHBOARD_DATA_REQUEST]: (state, { payload }) => {\n    state.loading = true;\n  },\n  [GET_DASHBOARD_DATA_REQUEST_SUCCESS]: (state, { payload }) => {\n    state.loading = false;\n    state.dashboard = payload.dashboard\n  },\n  [GET_DASHBOARD_DATA_REQUEST_ERROR]: (state, { payload }) => {\n    state.loading = false;\n    state.error = payload.error\n  },\n});\n\nfunction* getDashboardDataRequest({ payload }) {\n  try {\n    const dashboardData = yield call(getRequest, \"http://www.mocky.io/v2/5cd04a20320000442200fc10\", payload, normalCheck);\n    const transformedData = getTransformedData(dashboardData.body);\n    yield put({\n      type: GET_DASHBOARD_DATA_REQUEST_SUCCESS,\n      payload: { dashboard: transformedData }\n    })\n  } catch (error) {\n    const msg = \"Oops...! Something went wrong! Please reload the page...\"\n    yield put({\n      type: GET_DASHBOARD_DATA_REQUEST_ERROR,\n      payload: { error: error.message ? error.message : msg }\n    })\n  }\n}\n\nexport function* dashboardSaga() {\n  yield all([yield takeEvery(GET_DASHBOARD_DATA_REQUEST, getDashboardDataRequest)]);\n}\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DatePicker } from \"antd\";\nimport { maxBy, minBy, isEmpty } from \"lodash\";\nimport moment from \"moment\";\n\nimport { StyledCard } from \"../../common/styled\";\nimport ChartContainer from \"./components/chartContainer\";\nimport TableContainer from \"./components/tableContainer\";\n\nimport { getDashboardSelector, getLoadingSelector, getErrorSelector, getDashboardRequestAction } from \"./ducks\";\n\nconst { RangePicker } = DatePicker;\n\nconst Dashboard = (props) => {\n  let { getDashboardRequestAction, dashboard, loading, error } = props;\n\n  const [range, setRange] = useState(null);\n  const [prevDashboard, setPrevDashboard] = useState(null);\n\n  useEffect(() => {\n    getDashboardRequestAction();\n  }, []);\n\n  const dateRange = useMemo(() => {\n    if (dashboard.length) {\n      return [moment(minBy(dashboard, \"date\").timestamp), moment(maxBy(dashboard, \"date\").timestamp)]\n    }\n    return []\n  }, [dashboard]);\n\n  if (prevDashboard !== dashboard && !isEmpty(dashboard)) {\n    setPrevDashboard(dashboard);\n    setRange([dateRange[0].valueOf(), dateRange[1].valueOf()]);\n  }\n\n  const filteredDashboard = useMemo(() => {\n    if (range !== null) {\n      return dashboard.filter((item, index) => {\n        if (item.date >= range[0] && item.date <= range[1]) {\n          return true;\n        }\n        return false;\n      });\n    } else {\n      return [];\n    }\n  }, [dashboard, range]);\n\n\n  const onPickerChange = (_range) => {\n    setRange([_range[0].valueOf(), _range[1].valueOf()]);\n  }\n\n  const disabledDate = (current) => {\n    return current && current > moment().endOf('day');\n  }\n\n  return (\n    <div>\n      <StyledCard loading={loading}>\n        {\n          (dashboard && !isEmpty(dashboard)) ?\n            <RangePicker defaultValue={dateRange} disabledDate={disabledDate} onChange={onPickerChange} />\n            : null\n        }\n        <ChartContainer dashboard={filteredDashboard} error={error} />\n      </StyledCard>\n      <StyledCard loading={loading}>\n        <TableContainer dashboard={filteredDashboard} error={error} />\n      </StyledCard>\n    </div>\n  )\n}\n\nexport default connect(\n  state => ({\n    dashboard: getDashboardSelector(state),\n    loading: getLoadingSelector(state),\n    error: getErrorSelector(state),\n  }),\n  {\n    getDashboardRequestAction: getDashboardRequestAction\n  }\n)(Dashboard);\n","import { dashboard } from \"../pages/pDashboard/ducks\";\n\nconst rootReducer = {\n  dashboard: dashboard\n};\n\nexport default rootReducer;\n","import { all } from \"redux-saga/effects\";\n\nimport { dashboardSaga } from \"../pages/pDashboard/ducks\";\n\nexport default function* () {\n  yield all([dashboardSaga()]);\n}\n","import { configureStore, getDefaultMiddleware } from 'redux-starter-kit'\nimport logger from 'redux-logger';\nimport createSagaMiddleware from \"redux-saga\";\n\nimport rootReducer from \"./reducers\";\nimport rootSaga from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [...getDefaultMiddleware(), logger, sagaMiddleware]\n\nconst preloadedState = {\n\n}\nconsole.log(\"rootReducer\", rootReducer)\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware,\n  devTools: process.env.NODE_ENV !== 'production',\n  preloadedState,\n  enhancers: []\n})\n\nsagaMiddleware.run(rootSaga);\n\nexport function getStore() {\n  return store;\n}\n","import React from 'react';\nimport { Provider } from \"react-redux\";\nimport Dashboard from \"./pages/pDashboard\";\nimport './App.css';\nimport { getStore } from \"./redux/configStore\";\n\nconst store = getStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Dashboard />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}